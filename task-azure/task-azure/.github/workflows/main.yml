name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io  # GitHub Container Registry
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  KUBECONFIG: ${{ secrets.KUBE_CONFIG }}

jobs:
  # Continuous Integration (CI) - Build and Test
  ci:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Frontend CI
    - name: Set up Node.js for Frontend
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'

    - name: Install Frontend Dependencies
      run: npm install
      working-directory: ./frontend

    - name: Run Frontend Tests
      run: npm test
      working-directory: ./frontend

    # Backend CI
    - name: Set up Python for Backend
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Backend Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov

    - name: Run Backend Tests
      run: |
        pytest --cov=./backend --cov-report=xml
      working-directory: ./backend

    - name: Upload Coverage Report
      uses: codecov/codecov-action@v3

  # Continuous Deployment (CD) - Build and Push Docker Images
  build-and-push:
    needs: ci
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build and Push Frontend Image
    - name: Build Frontend Docker image
      run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }} -f frontend/Dockerfile frontend/

    - name: Push Frontend Docker image
      run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}

    # Build and Push Backend Image
    - name: Build Backend Docker image
      run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }} -f backend/Dockerfile backend/

    - name: Push Backend Docker image
      run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}

    # Store image tags for deployment
    - name: Save image tags
      run: |
        echo "FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}" >> $GITHUB_ENV
        echo "BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}" >> $GITHUB_ENV

  # Continuous Deployment (CD) - Deploy to Kubernetes
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only deploy on main branch

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure Kubernetes
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Deploy to Kubernetes
      run: |
        # Set up kubectl configuration
        echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml

        # Update image tags in Helm charts
        sed -i "s|image: .*|image: ${{ env.FRONTEND_IMAGE }}|" charts/frontend/values.yaml
        sed -i "s|image: .*|image: ${{ env.BACKEND_IMAGE }}|" charts/backend/values.yaml

        # Install/Upgrade Helm releases
        helm upgrade --install frontend ./charts/frontend --namespace=default
        helm upgrade --install backend ./charts/backend --namespace=default